[ec2-user@ip-172-31-93-35 aws_implementation]$ terraform plan
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ECR.aws_ecr_repository.tessolve will be created
  + resource "aws_ecr_repository" "tessolve" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "tessolve-ecr"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.Route53.aws_acm_certificate.hello_certificate will be created
  + resource "aws_acm_certificate" "hello_certificate" {
      + arn                       = (known after apply)
      + domain_name               = "helloworld.info"
      + domain_validation_options = [
          + {
              + domain_name           = "helloworld.info"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
        ]
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = [
          + "helloworld.info",
        ]
      + tags_all                  = (known after apply)
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = "DNS"
    }

  # module.Route53.aws_acm_certificate_validation.hello_cert_validate will be created
  + resource "aws_acm_certificate_validation" "hello_cert_validate" {
      + certificate_arn         = (known after apply)
      + id                      = (known after apply)
      + validation_record_fqdns = (known after apply)
    }

  # module.Route53.aws_route53_record.hello_cert_dns will be created
  + resource "aws_route53_record" "hello_cert_dns" {
      + allow_overwrite = true
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = (known after apply)
      + records         = (known after apply)
      + ttl             = 60
      + type            = (known after apply)
      + zone_id         = (known after apply)
    }

  # module.Route53.aws_route53_zone.hello_world_zone will be created
  + resource "aws_route53_zone" "hello_world_zone" {
      + arn                 = (known after apply)
      + comment             = "Managed by Terraform"
      + force_destroy       = false
      + id                  = (known after apply)
      + name                = "helloworld.info"
      + name_servers        = (known after apply)
      + primary_name_server = (known after apply)
      + tags_all            = (known after apply)
      + zone_id             = (known after apply)
    }

  # module.eks.aws_eks_cluster.tessolve will be created
  + resource "aws_eks_cluster" "tessolve" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + cluster_id            = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "tessolve-eks"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags_all              = (known after apply)
      + version               = (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.tessolve will be created
  + resource "aws_eks_node_group" "tessolve" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "tessolve-eks"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t2.small",
        ]
      + node_group_name        = "tessolve"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags_all               = (known after apply)
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 2
          + max_size     = 2
          + min_size     = 2
        }
    }

  # module.eks.aws_iam_role.tessolve will be created
  + resource "aws_iam_role" "tessolve" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-cluster-tessolve"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role.tessolve2 will be created
  + resource "aws_iam_role" "tessolve2" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-node-group-tessolve"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "eks-node-group-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks-cluster-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSVPCResourceController will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKSVPCResourceController" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = "eks-cluster-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "eks-node-group-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "eks-node-group-tessolve"
    }

  # module.eks.aws_security_group.node_group_one will be created
  + resource "aws_security_group" "node_group_one" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = "node_group_one"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_default_route_table.internal_tessolve_default will be created
  + resource "aws_default_route_table" "internal_tessolve_default" {
      + arn                    = (known after apply)
      + default_route_table_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + route                  = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags                   = {
          + "Name" = "tessolve"
        }
      + tags_all               = {
          + "Name" = "tessolve"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.tessolve_gw will be created
  + resource "aws_internet_gateway" "tessolve_gw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "tessolve"
        }
      + tags_all = {
          + "Name" = "tessolve"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table_association.default[0] will be created
  + resource "aws_route_table_association" "default" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.default[1] will be created
  + resource "aws_route_table_association" "default" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.public_tessolve_subnet[0] will be created
  + resource "aws_subnet" "public_tessolve_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tessolve"
        }
      + tags_all                                       = {
          + "Name" = "tessolve"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public_tessolve_subnet[1] will be created
  + resource "aws_subnet" "public_tessolve_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tessolve"
        }
      + tags_all                                       = {
          + "Name" = "tessolve"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.tessolve will be created
  + resource "aws_vpc" "tessolve" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "tessolve"
        }
      + tags_all                             = {
          + "Name" = "tessolve"
        }
    }

  # module.vpc.random_shuffle.az_list will be created
  + resource "random_shuffle" "az_list" {
      + id           = (known after apply)
      + input        = [
          + "us-east-1a",
          + "us-east-1b",
          + "us-east-1c",
          + "us-east-1d",
          + "us-east-1e",
          + "us-east-1f",
        ]
      + result       = (known after apply)
      + result_count = 2
    }

Plan: 23 to add, 0 to change, 0 to destroy.

────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Note: You didn't use the -out option to save this plan, so Terraform can't guarantee to take exactly these actions if you run "terraform apply" now.
[ec2-user@ip-172-31-93-35 aws_implementation]$ ^C
[ec2-user@ip-172-31-93-35 aws_implementation]$ terraform apply
module.vpc.data.aws_availability_zones.available: Reading...
module.vpc.data.aws_availability_zones.available: Read complete after 0s [id=us-east-1]

Terraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:
  + create

Terraform will perform the following actions:

  # module.ECR.aws_ecr_repository.tessolve will be created
  + resource "aws_ecr_repository" "tessolve" {
      + arn                  = (known after apply)
      + id                   = (known after apply)
      + image_tag_mutability = "MUTABLE"
      + name                 = "tessolve-ecr"
      + registry_id          = (known after apply)
      + repository_url       = (known after apply)
      + tags_all             = (known after apply)

      + image_scanning_configuration {
          + scan_on_push = true
        }
    }

  # module.Route53.aws_acm_certificate.hello_certificate will be created
  + resource "aws_acm_certificate" "hello_certificate" {
      + arn                       = (known after apply)
      + domain_name               = "helloworld.info"
      + domain_validation_options = [
          + {
              + domain_name           = "helloworld.info"
              + resource_record_name  = (known after apply)
              + resource_record_type  = (known after apply)
              + resource_record_value = (known after apply)
            },
        ]
      + id                        = (known after apply)
      + key_algorithm             = (known after apply)
      + not_after                 = (known after apply)
      + not_before                = (known after apply)
      + pending_renewal           = (known after apply)
      + renewal_eligibility       = (known after apply)
      + renewal_summary           = (known after apply)
      + status                    = (known after apply)
      + subject_alternative_names = [
          + "helloworld.info",
        ]
      + tags_all                  = (known after apply)
      + type                      = (known after apply)
      + validation_emails         = (known after apply)
      + validation_method         = "DNS"
    }

  # module.Route53.aws_acm_certificate_validation.hello_cert_validate will be created
  + resource "aws_acm_certificate_validation" "hello_cert_validate" {
      + certificate_arn         = (known after apply)
      + id                      = (known after apply)
      + validation_record_fqdns = (known after apply)
    }

  # module.Route53.aws_route53_record.hello_cert_dns will be created
  + resource "aws_route53_record" "hello_cert_dns" {
      + allow_overwrite = true
      + fqdn            = (known after apply)
      + id              = (known after apply)
      + name            = (known after apply)
      + records         = (known after apply)
      + ttl             = 60
      + type            = (known after apply)
      + zone_id         = (known after apply)
    }

  # module.Route53.aws_route53_zone.hello_world_zone will be created
  + resource "aws_route53_zone" "hello_world_zone" {
      + arn                 = (known after apply)
      + comment             = "Managed by Terraform"
      + force_destroy       = false
      + id                  = (known after apply)
      + name                = "helloworld.info"
      + name_servers        = (known after apply)
      + primary_name_server = (known after apply)
      + tags_all            = (known after apply)
      + zone_id             = (known after apply)
    }

  # module.eks.aws_eks_cluster.tessolve will be created
  + resource "aws_eks_cluster" "tessolve" {
      + arn                   = (known after apply)
      + certificate_authority = (known after apply)
      + cluster_id            = (known after apply)
      + created_at            = (known after apply)
      + endpoint              = (known after apply)
      + id                    = (known after apply)
      + identity              = (known after apply)
      + name                  = "tessolve-eks"
      + platform_version      = (known after apply)
      + role_arn              = (known after apply)
      + status                = (known after apply)
      + tags_all              = (known after apply)
      + version               = (known after apply)

      + vpc_config {
          + cluster_security_group_id = (known after apply)
          + endpoint_private_access   = false
          + endpoint_public_access    = true
          + public_access_cidrs       = [
              + "0.0.0.0/0",
            ]
          + security_group_ids        = (known after apply)
          + subnet_ids                = (known after apply)
          + vpc_id                    = (known after apply)
        }
    }

  # module.eks.aws_eks_node_group.tessolve will be created
  + resource "aws_eks_node_group" "tessolve" {
      + ami_type               = (known after apply)
      + arn                    = (known after apply)
      + capacity_type          = (known after apply)
      + cluster_name           = "tessolve-eks"
      + disk_size              = (known after apply)
      + id                     = (known after apply)
      + instance_types         = [
          + "t2.small",
        ]
      + node_group_name        = "tessolve"
      + node_group_name_prefix = (known after apply)
      + node_role_arn          = (known after apply)
      + release_version        = (known after apply)
      + resources              = (known after apply)
      + status                 = (known after apply)
      + subnet_ids             = (known after apply)
      + tags_all               = (known after apply)
      + version                = (known after apply)

      + scaling_config {
          + desired_size = 2
          + max_size     = 2
          + min_size     = 2
        }
    }

  # module.eks.aws_iam_role.tessolve will be created
  + resource "aws_iam_role" "tessolve" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "eks.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-cluster-tessolve"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role.tessolve2 will be created
  + resource "aws_iam_role" "tessolve2" {
      + arn                   = (known after apply)
      + assume_role_policy    = jsonencode(
            {
              + Statement = [
                  + {
                      + Action    = "sts:AssumeRole"
                      + Effect    = "Allow"
                      + Principal = {
                          + Service = "ec2.amazonaws.com"
                        }
                    },
                ]
              + Version   = "2012-10-17"
            }
        )
      + create_date           = (known after apply)
      + force_detach_policies = false
      + id                    = (known after apply)
      + managed_policy_arns   = (known after apply)
      + max_session_duration  = 3600
      + name                  = "eks-node-group-tessolve"
      + name_prefix           = (known after apply)
      + path                  = "/"
      + tags_all              = (known after apply)
      + unique_id             = (known after apply)
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEC2ContainerRegistryReadOnly will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEC2ContainerRegistryReadOnly" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly"
      + role       = "eks-node-group-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSClusterPolicy will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKSClusterPolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
      + role       = "eks-cluster-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSVPCResourceController will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKSVPCResourceController" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController"
      + role       = "eks-cluster-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSWorkerNodePolicy will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKSWorkerNodePolicy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy"
      + role       = "eks-node-group-tessolve"
    }

  # module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKS_CNI_Policy will be created
  + resource "aws_iam_role_policy_attachment" "tessolve-AmazonEKS_CNI_Policy" {
      + id         = (known after apply)
      + policy_arn = "arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy"
      + role       = "eks-node-group-tessolve"
    }

  # module.eks.aws_security_group.node_group_one will be created
  + resource "aws_security_group" "node_group_one" {
      + arn                    = (known after apply)
      + description            = "Managed by Terraform"
      + egress                 = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 0
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "-1"
              + security_groups  = []
              + self             = false
              + to_port          = 0
            },
        ]
      + id                     = (known after apply)
      + ingress                = [
          + {
              + cidr_blocks      = [
                  + "0.0.0.0/0",
                ]
              + description      = ""
              + from_port        = 80
              + ipv6_cidr_blocks = []
              + prefix_list_ids  = []
              + protocol         = "tcp"
              + security_groups  = []
              + self             = false
              + to_port          = 80
            },
        ]
      + name                   = (known after apply)
      + name_prefix            = "node_group_one"
      + owner_id               = (known after apply)
      + revoke_rules_on_delete = false
      + tags_all               = (known after apply)
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_default_route_table.internal_tessolve_default will be created
  + resource "aws_default_route_table" "internal_tessolve_default" {
      + arn                    = (known after apply)
      + default_route_table_id = (known after apply)
      + id                     = (known after apply)
      + owner_id               = (known after apply)
      + route                  = [
          + {
              + cidr_block                 = "0.0.0.0/0"
              + core_network_arn           = ""
              + destination_prefix_list_id = ""
              + egress_only_gateway_id     = ""
              + gateway_id                 = (known after apply)
              + instance_id                = ""
              + ipv6_cidr_block            = ""
              + nat_gateway_id             = ""
              + network_interface_id       = ""
              + transit_gateway_id         = ""
              + vpc_endpoint_id            = ""
              + vpc_peering_connection_id  = ""
            },
        ]
      + tags                   = {
          + "Name" = "tessolve"
        }
      + tags_all               = {
          + "Name" = "tessolve"
        }
      + vpc_id                 = (known after apply)
    }

  # module.vpc.aws_internet_gateway.tessolve_gw will be created
  + resource "aws_internet_gateway" "tessolve_gw" {
      + arn      = (known after apply)
      + id       = (known after apply)
      + owner_id = (known after apply)
      + tags     = {
          + "Name" = "tessolve"
        }
      + tags_all = {
          + "Name" = "tessolve"
        }
      + vpc_id   = (known after apply)
    }

  # module.vpc.aws_route_table_association.default[0] will be created
  + resource "aws_route_table_association" "default" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_route_table_association.default[1] will be created
  + resource "aws_route_table_association" "default" {
      + id             = (known after apply)
      + route_table_id = (known after apply)
      + subnet_id      = (known after apply)
    }

  # module.vpc.aws_subnet.public_tessolve_subnet[0] will be created
  + resource "aws_subnet" "public_tessolve_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.1.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tessolve"
        }
      + tags_all                                       = {
          + "Name" = "tessolve"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_subnet.public_tessolve_subnet[1] will be created
  + resource "aws_subnet" "public_tessolve_subnet" {
      + arn                                            = (known after apply)
      + assign_ipv6_address_on_creation                = false
      + availability_zone                              = (known after apply)
      + availability_zone_id                           = (known after apply)
      + cidr_block                                     = "10.0.2.0/24"
      + enable_dns64                                   = false
      + enable_resource_name_dns_a_record_on_launch    = false
      + enable_resource_name_dns_aaaa_record_on_launch = false
      + id                                             = (known after apply)
      + ipv6_cidr_block_association_id                 = (known after apply)
      + ipv6_native                                    = false
      + map_public_ip_on_launch                        = true
      + owner_id                                       = (known after apply)
      + private_dns_hostname_type_on_launch            = (known after apply)
      + tags                                           = {
          + "Name" = "tessolve"
        }
      + tags_all                                       = {
          + "Name" = "tessolve"
        }
      + vpc_id                                         = (known after apply)
    }

  # module.vpc.aws_vpc.tessolve will be created
  + resource "aws_vpc" "tessolve" {
      + arn                                  = (known after apply)
      + cidr_block                           = "10.0.0.0/16"
      + default_network_acl_id               = (known after apply)
      + default_route_table_id               = (known after apply)
      + default_security_group_id            = (known after apply)
      + dhcp_options_id                      = (known after apply)
      + enable_dns_hostnames                 = (known after apply)
      + enable_dns_support                   = true
      + enable_network_address_usage_metrics = (known after apply)
      + id                                   = (known after apply)
      + instance_tenancy                     = "default"
      + ipv6_association_id                  = (known after apply)
      + ipv6_cidr_block                      = (known after apply)
      + ipv6_cidr_block_network_border_group = (known after apply)
      + main_route_table_id                  = (known after apply)
      + owner_id                             = (known after apply)
      + tags                                 = {
          + "Name" = "tessolve"
        }
      + tags_all                             = {
          + "Name" = "tessolve"
        }
    }

  # module.vpc.random_shuffle.az_list will be created
  + resource "random_shuffle" "az_list" {
      + id           = (known after apply)
      + input        = [
          + "us-east-1a",
          + "us-east-1b",
          + "us-east-1c",
          + "us-east-1d",
          + "us-east-1e",
          + "us-east-1f",
        ]
      + result       = (known after apply)
      + result_count = 2
    }

Plan: 23 to add, 0 to change, 0 to destroy.

Do you want to perform these actions?
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  Enter a value: yes

module.vpc.random_shuffle.az_list: Creating...
module.vpc.random_shuffle.az_list: Creation complete after 0s [id=-]
module.ECR.aws_ecr_repository.tessolve: Creating...
module.Route53.aws_acm_certificate.hello_certificate: Creating...
module.eks.aws_iam_role.tessolve: Creating...
module.eks.aws_iam_role.tessolve2: Creating...
module.Route53.aws_route53_zone.hello_world_zone: Creating...
module.vpc.aws_vpc.tessolve: Creating...
module.ECR.aws_ecr_repository.tessolve: Creation complete after 0s [id=tessolve-ecr]
module.eks.aws_iam_role.tessolve: Creation complete after 0s [id=eks-cluster-tessolve]
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSVPCResourceController: Creating...
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSClusterPolicy: Creating...
module.eks.aws_iam_role.tessolve2: Creation complete after 0s [id=eks-node-group-tessolve]
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEC2ContainerRegistryReadOnly: Creating...
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKS_CNI_Policy: Creating...
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSWorkerNodePolicy: Creating...
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSClusterPolicy: Creation complete after 0s [id=eks-cluster-tessolve-20240306092146968300000003]
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKS_CNI_Policy: Creation complete after 0s [id=eks-node-group-tessolve-20240306092146979800000005]
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSWorkerNodePolicy: Creation complete after 0s [id=eks-node-group-tessolve-20240306092146983300000006]
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEC2ContainerRegistryReadOnly: Creation complete after 0s [id=eks-node-group-tessolve-20240306092146983900000007]
module.eks.aws_iam_role_policy_attachment.tessolve-AmazonEKSVPCResourceController: Creation complete after 0s [id=eks-cluster-tessolve-20240306092146978300000004]
module.vpc.aws_vpc.tessolve: Creation complete after 1s [id=vpc-0eb8d3c44b74c71a3]
module.vpc.aws_subnet.public_tessolve_subnet[0]: Creating...
module.vpc.aws_subnet.public_tessolve_subnet[1]: Creating...
module.vpc.aws_internet_gateway.tessolve_gw: Creating...
module.eks.aws_security_group.node_group_one: Creating...
module.vpc.aws_internet_gateway.tessolve_gw: Creation complete after 0s [id=igw-05788ca67a084c947]
module.vpc.aws_default_route_table.internal_tessolve_default: Creating...
module.vpc.aws_default_route_table.internal_tessolve_default: Creation complete after 1s [id=rtb-0365eae81e537659e]
module.eks.aws_security_group.node_group_one: Creation complete after 2s [id=sg-04e800973240a9419]
module.Route53.aws_acm_certificate.hello_certificate: Creation complete after 5s [id=arn:aws:acm:us-east-1:250919241461:certificate/1e53cd30-5876-4018-9a38-f191d31d47ef]
module.Route53.aws_route53_zone.hello_world_zone: Still creating... [10s elapsed]
module.vpc.aws_subnet.public_tessolve_subnet[0]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public_tessolve_subnet[1]: Still creating... [10s elapsed]
module.vpc.aws_subnet.public_tessolve_subnet[0]: Creation complete after 10s [id=subnet-02462fda94362931a]
module.vpc.aws_subnet.public_tessolve_subnet[1]: Creation complete after 10s [id=subnet-0e6222902d756f5c7]
module.vpc.aws_route_table_association.default[0]: Creating...
module.eks.aws_eks_cluster.tessolve: Creating...
module.vpc.aws_route_table_association.default[1]: Creating...
module.vpc.aws_route_table_association.default[1]: Creation complete after 0s [id=rtbassoc-0a0148c586f6a5301]
module.vpc.aws_route_table_association.default[0]: Creation complete after 1s [id=rtbassoc-06b03c62d37bd3aa1]
module.Route53.aws_route53_zone.hello_world_zone: Still creating... [20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [10s elapsed]
module.Route53.aws_route53_zone.hello_world_zone: Still creating... [30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [20s elapsed]
module.Route53.aws_route53_zone.hello_world_zone: Still creating... [40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [30s elapsed]
module.Route53.aws_route53_zone.hello_world_zone: Creation complete after 46s [id=Z099527513FZV4Z4TZ2PF]
module.Route53.aws_route53_record.hello_cert_dns: Creating...
module.eks.aws_eks_cluster.tessolve: Still creating... [40s elapsed]
module.Route53.aws_route53_record.hello_cert_dns: Still creating... [10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [50s elapsed]
module.Route53.aws_route53_record.hello_cert_dns: Still creating... [20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [1m0s elapsed]
module.Route53.aws_route53_record.hello_cert_dns: Still creating... [30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [1m10s elapsed]
module.Route53.aws_route53_record.hello_cert_dns: Still creating... [40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [1m20s elapsed]
module.Route53.aws_route53_record.hello_cert_dns: Still creating... [50s elapsed]
module.Route53.aws_route53_record.hello_cert_dns: Creation complete after 52s [id=Z099527513FZV4Z4TZ2PF__167965f62c1a0325974e64b0a9f8081d.helloworld.info._CNAME]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Creating...
module.eks.aws_eks_cluster.tessolve: Still creating... [1m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [1m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [1m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [2m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [2m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [50s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [2m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [1m0s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [2m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [1m10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [2m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [1m20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [2m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [1m30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [3m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [1m40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [3m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [1m50s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [3m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [2m0s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [3m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [2m10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [3m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [2m20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [3m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [2m30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [4m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [2m40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [4m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [2m50s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [4m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [3m0s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [4m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [3m10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [4m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [3m20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [4m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [3m30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [5m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [3m40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [5m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [3m50s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [5m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [4m0s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [5m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [4m10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [5m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [4m20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [5m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [4m30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [6m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [4m40s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [6m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [4m50s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [6m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [5m0s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [6m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [5m10s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [6m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [5m20s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [6m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [5m30s elapsed]
module.eks.aws_eks_cluster.tessolve: Still creating... [7m0s elapsed]
module.eks.aws_eks_cluster.tessolve: Creation complete after 7m2s [id=tessolve-eks]
module.eks.aws_eks_node_group.tessolve: Creating...
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [5m40s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [5m50s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [6m0s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [6m10s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [6m20s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [6m30s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [1m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [6m40s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [1m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [6m50s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [1m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [7m0s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [1m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [7m10s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [1m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [7m20s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [1m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [7m30s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [2m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [7m40s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [2m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [7m50s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [2m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [8m0s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [2m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [8m10s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [2m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [8m20s elapsed]
module.eks.aws_eks_node_group.tessolve: Still creating... [2m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [8m30s elapsed]
module.eks.aws_eks_node_group.tessolve: Creation complete after 2m57s [id=tessolve-eks:tessolve]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [8m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [8m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [9m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [9m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [9m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [9m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [9m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [9m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [10m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [11m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [11m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [11m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [11m30s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [11m40s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [11m50s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [12m0s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [12m10s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [12m20s elapsed]
module.Route53.aws_acm_certificate_validation.hello_cert_validate: Still creating... [12m30s elapsed]
